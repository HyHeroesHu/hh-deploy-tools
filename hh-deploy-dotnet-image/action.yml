name: "Deploy HH .NET App From Dockerhub image"

description: "Deploying HyHeroes .NET application from dockerhub, via SSH"

inputs:
  application-name:
    description: "The full name of the application"
  discord-nofity-webook-url:
    description: "The Discord webhook URL for event notification."
    required: true
  dockerhub-pat:
    description: "DockerHub PAT for pushing images."
    required: true
  dockerhub-user:
    description: "DockerHub user for pushing images."
    required: true
  dockerhub-namespace:
    description: "DockerHub namespace for pushing images."
    required: true
  dockerhub-image-name:
    description: "DockerHub image name. At the end a timestamp will be concated."
    required: true
  docker-container-name:
    description: "The name of the docker container, which will host the app."
    required: true
  docker-container-port:
    description: "The public port, where the docker container's app will be reachable."
    required: true
  version-timestamp:
    description: "Version timestamp value for docker image identifying."
    required: true
  ssh-host:
    description: "SSH host address"
    required: true
  ssh-user:
    description: "SSH user"
    required: true
  ssh-password:
    description: "SSH password"
    required: true
  secret-env-base64:
    description: ".env file content in Base64"
    required: true
  nginx-site-config-path:
    description: "Absolute path to nginx site config on Linux. If false, the app won't be remove from the nginx upstream during the deployment."
    required: false

runs:
  using: "composite"
  steps:
    - name: Get Current Timestamp
      shell: bash
      id: timestampPublishStarted
      run: |
        export TZ="Europe/Budapest"
        echo "timestampPublishStarted=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV
  
    - name: Notify Discord
      uses: liondadev/discord-action@v2.1.3
      with:
        # The webhook URL
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        # The message to send
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🟡 State: **PUBLISH STARTED**
          ⏲️ Timestamp: **${{ env.timestampPublishStarted }}**
          🆔 Run ID: **${{ github.run_id }}**
          👤 Git Actor: **${{ github.actor }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    # Step 9: Deploy to VPS
    - name: Deploy Docker image to VPS via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.ssh-host }}
        username: ${{ inputs.ssh-user }}
        password: ${{ inputs.ssh-password }}
        script: |
          # Login to docker
          echo "${{ inputs.dockerhub-pat }}" | docker login -u "${{ inputs.dockerhub-user }}" --password-stdin

          # Delete all previous images
          docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ inputs.docker-image-name }}" | while read -r image; do
              echo "Removing image: $image"
              docker rmi -f "$image"
          done

          # Pull new image
          docker pull ${{ inputs.dockerhub-namespace }}/${{ inputs.dockerhub-image-name }}:${{ github.ref_name }}-${{ inputs.version-timestamp }}

          # Remove the server from the nginx upstream for avoiding traffic on stopped replica
          if [[ -n "${{ inputs.nginx-site-config-path }}" ]]; then
            sed -i "s|server 127.0.0.1:${{ inputs.docker-container-port }} max_conns=2000;|server 127.0.0.1:${{ inputs.docker-container-port }} max_conns=2000 down;|" ${{ inputs.nginx-site-config-path }}
            nginx -s reload
          fi
          
          # Delete the existing container
          docker stop ${{ inputs.docker-container-name }}
          docker rm ${{ inputs.docker-container-name }}
          
          # Increase linux kernel's inotify limit
          sudo sysctl fs.inotify.max_user_instances=1024

          echo "${{ inputs.secret-env-base64 }}" | base64 --decode > .env
          cat .env  # Optional: print the file content for debugging (remove in production)

          # Start he new version
          docker run -d --network=host --name ${{ inputs.docker-container-name }} --env-file .env -e ASPNETCORE_HTTP_PORTS=${{ inputs.docker-container-port }} ${{ inputs.dockerhub-namespace }}/${{ inputs.dockerhub-image-name }}:${{ github.ref_name }}-${{ inputs.version-timestamp }}

          # Wait before allowing traffix through nginx
          sleep 10 &
          wait
          
          # Add the server to the nginx upstream for enabling traffic on deployed replica
          if [[ -n "${{ inputs.nginx-site-config-path }}" ]]; then
            sed -i "s|server 127.0.0.1:${{ inputs.docker-container-port }} max_conns=2000 down;|server 127.0.0.1:${{ inputs.docker-container-port }} max_conns=2000;|" ${{ inputs.nginx-site-config-path }}
            nginx -s reload
          fi
          
    ##
    ## Conditional Discord notifications about finish
    ##
    - name: Get Current Timestamp
      id: timestampPublishSucceeded
      shell: bash
      run: |
        export TZ="Europe/Budapest"
        echo "timestampPublishSucceeded=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV
        
    - name: Notify Discord (on Success)
      uses: liondadev/discord-action@v2.1.3
      with:
        # The webhook URL
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        # The message to send
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🟢 State: **PUBLISH SUCCEEDED**
          ⏲️ Timestamp: **${{ env.timestampPublishSucceeded }}**
          🆔 Run ID: **${{ github.run_id }}**
          👤 Git Actor: **${{ github.actor }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    - name: Get Current Timestamp
      id: timestampPublishFailed
      shell: bash
      if: failure() # Only runs if there is a failure in previous steps
      run: |
        export TZ="Europe/Budapest"
        echo "timestampPublishFailed=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV

    - name: Notify Discord (on Failure)
      uses: liondadev/discord-action@v2.1.3
      if: failure() # Only runs if there is a failure in previous steps
      with:
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🔴 State: **PUBLISH FAILED**
          ⏲️ Timestamp: **${{ env.timestampPublishFailed }}**
          🆔 Run ID: **${{ github.run_id }}**
          👤 Git Actor: **${{ github.actor }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    

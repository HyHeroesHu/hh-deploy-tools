name: "Build HH.WebPanel Docker image and push to DockerHub"

description: "Action for building HH.WebPanel Angular application and pushing to DockerHub."

inputs:
  application-name: #"HH.WebPanel"
    description: "The full name of the application"
  discord-nofity-webook-url: #${{ secrets.DISCORD_WEBHOOK_URL }}
    description: "The Discord webhook URL for event notification."
    required: true
  application-repository: #"HyHeroesHu/HH.WebPanel"
    description: "The repository for the application source."
    required: true
  application-repository-token: #${{ secrets.PUBLISH_PAT_TOKEN }}
    description: "GitHub PAT for checkout the repos."
    required: true
  dockerhub-pat: #${{ secrets.DOCKERHUB_PAT }}
    description: "DockerHub PAT for pushing images."
    required: true
  dockerhub-user: #${{ secrets.DOCKERHUB_USER }}
    description: "DockerHub user for pushing images."
    required: true
  dockerhub-namespace: #"martinmarkus"
    description: "DockerHub namespace for pushing images."
    required: true
  dockerhub-image-name: #"hh.backend.webpanel"
    description: "DockerHub image name. At the end a timestamp will be concated."
    required: true

outputs:
  version-timestamp:
    description: "The used timestamp for versioning the Docker image."
    value: ${{ steps.set_timestamp.outputs.timestamp }}

runs:
  using: "composite"
  steps:
    # Step 1: Get timestamp
    - name: Get Current Timestamp
      id: timestampBuildStarted
      shell: bash
      run: |
        export TZ="Europe/Budapest"
        sudo echo "timestampBuildStarted=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV
      
    # Step 2: Discord notification
    - name: Notify Discord (on Start)
      uses: liondadev/discord-action@v2.1.3
      with:
        # The webhook URL
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        # The message to send
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🟡 State: **BUILD STARTED**
          ⏲️ Timestamp: **${{ env.timestampBuildStarted }}**
          👤 Started By: **${{ github.actor }}**
          🆔 Run ID: **${{ github.run_id }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  
    # Step 3: Checkout
    - name: Checkout ${{ inputs.application-name }}
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.application-repository }}
        token: ${{ inputs.application-repository-token }}
        path: ${{ inputs.application-name }}

    # Step 4: Checkout code from $BRANCH branch of the repo
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 5: Log in to Docker
    - name: Log in to Docker Hub
      shell: bash  
      run: sudo echo "${{ inputs.dockerhub-pat }}" | sudo docker login -u "${{ inputs.dockerhub-user }}" --password-stdin
    
    # Step 6: Set version timestamp globally for later usage from the publish job
    - name: Set dynamic global environment variable
      id: set_timestamp
      shell: bash
      run: |
        export TZ="Europe/Budapest"
        sudo TIMESTAMP=$(date +"%Y%m%d%H%M%S")
        sudo echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        sudo echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        sudo echo "::set-output name=timestamp::$TIMESTAMP"
    
    # Step 7: Build and push Docker image
    - name: Build and Push Docker Image
      shell: bash
      run: |
        sudo IMAGE_NAME=${{ inputs.dockerhub-namespace }}/${{ inputs.dockerhub-image-name }}
        sudo docker build -t $IMAGE_NAME:${{ github.ref_name }}-${{ env.TIMESTAMP }} -f ./Dockerfile .
        sudo docker push $IMAGE_NAME:${{ github.ref_name }}-${{ env.TIMESTAMP }}

    ##
    ## Conditional Discord notifications about finish
    ##
    - name: Get Current Timestamp
      id: timestampBuildingSucceeded
      shell: bash
      run: |
        export TZ="Europe/Budapest"
        sudo echo "timestampBuildingSucceeded=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV
        
    - name: Notify Discord (on Success)
      uses: liondadev/discord-action@v2.1.3
      with:
        # The webhook URL
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        # The message to send
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🟢 State: **BUILD SUCCEEDED**
          ⏲️ Timestamp: **${{ env.timestampBuildingSucceeded }}**
          🆔 Run ID: **${{ github.run_id }}**
          👤 Git Actor: **${{ github.actor }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
    - name: Get Current Timestamp
      id: timestampBuildingFailed
      shell: bash
      if: failure()
      run: |
        export TZ="Europe/Budapest"
        sudo echo "timestampBuildingFailed=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV

    - name: Notify Discord (on Failure)
      uses: liondadev/discord-action@v2.1.3
      if: failure()
      with:
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🔴 State: **BUILD FAILED**
          ⏲️ Timestamp: **${{ env.timestampBuildingFailed }}**
          🆔 Run ID: **${{ github.run_id }}**
          👤 Git Actor: **${{ github.actor }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

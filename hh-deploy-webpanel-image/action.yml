name: "Deploy HH.WebPanel App From Dockerhub image"

description: "Deploying HH.WebPanel application from dockerhub, via SSH"

inputs:
  application-name:
    description: "The full name of the application"
  discord-nofity-webook-url:
    description: "The Discord webhook URL for event notification."
    required: true
  dockerhub-pat:
    description: "DockerHub PAT for pushing images."
    required: true
  dockerhub-user:
    description: "DockerHub user for pushing images."
    required: true
  dockerhub-namespace:
    description: "DockerHub namespace for pushing images."
    required: true
  dockerhub-image-name:
    description: "DockerHub image name. At the end a timestamp will be concated."
    required: true
  docker-container-name:
    description: "The name of the docker container, which will host the app."
    required: true
  docker-container-port:
    description: "The public port, where the docker container's app will be reachable."
    required: true
  nginx-site-config-path:
    description: "Absolute path to nginx site config on Linux"
    required: true
  version-timestamp:
    description: "Version timestamp value for docker image identifying."
    required: true
  ssh-host:
    description: "SSH host address"
    required: true
  ssh-user:
    description: "SSH user"
    required: true
  ssh-password:
    description: "SSH password"
    required: true

runs:
  using: "composite"
  steps:
    # Step 1: Get timestamp
    - name: Get Current Timestamp
      id: timestampBuildStarted
      shell: bash
      run: |
        sudo export TZ="Europe/Budapest"
        sudo echo "timestampBuildStarted=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV
      
    # Step 2: Discord notification
    - name: Notify Discord (on Start)
      uses: liondadev/discord-action@v2.1.3
      with:
        # The webhook URL
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        # The message to send
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🟡 State: **PUBLISH STARTED**
          ⏲️ Timestamp: **${{ env.timestampBuildStarted }}**
          👤 Started By: **${{ github.actor }}**
          🆔 Run ID: **${{ github.run_id }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
    # Step 3: Deploy to VPS
    - name: Deploy Docker image to VPS via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.ssh-host }}
        username: ${{ inputs.ssh-user }}
        password: ${{ inputs.ssh-password }}
        script: |
          # Login to docker
          sudo echo "${{ inputs.dockerhub-pat }}" | docker login -u "${{ inputs.dockerhub-user }}" --password-stdin

          # Delete all previous images
          sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ inputs.docker-image-name }}" | while read -r image; do
              sudo echo "Removing image: $image"
              sudo docker rmi -f "$image"
          done

          # Pull new image
          sudo docker pull ${{ inputs.dockerhub-namespace }}/${{ inputs.dockerhub-image-name }}:${{ github.ref_name }}-${{ inputs.version-timestamp }}

          # Delete the existing container
          sudo docker stop ${{ inputs.docker-container-name }}
          sudo docker rm ${{ inputs.docker-container-name }}
          
          # Increase linux kernel's inotify limit
          sudo sudo sysctl fs.inotify.max_user_instances=1024

          # Create a container from the image, WITHOUT starting it
          sudo docker create --name temp-${{ inputs.docker-container-name }} ${{ inputs.dockerhub-namespace }}/${{ inputs.dockerhub-image-name }}:${{ github.ref_name }}-${{ inputs.version-timestamp }}

          # Copy the files from the container to helper target folder near the host
          sudo docker cp temp-${{ inputs.docker-container-name }}:/app /var/www/hh.webpanel-new

          # Rename the old production folder, with tagging for deletion
          sudo mv /var/www/hh.webpanel /var/www/hh.webpanel-remove

          # Rename the new folder to production usage
          sudo mv /var/www/hh.webpanel-new /var/www/hh.webpanel

          # Clear the target folder
          sudo rm -rf /var/www/hh.webpanel-remove
         
          # Remove temp container
          sudo docker rm temp-${{ inputs.docker-container-name }}


    ##
    ## Conditional Discord notifications about finish
    ##
    - name: Get Current Timestamp
      id: timestampBuildingSucceeded
      shell: bash
      run: |
        sudo export TZ="Europe/Budapest"
        sudo echo "timestampBuildingSucceeded=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV
        
    - name: Notify Discord (on Success)
      uses: liondadev/discord-action@v2.1.3
      with:
        # The webhook URL
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        # The message to send
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🟢 State: **PUBLISH SUCCEEDED**
          ⏲️ Timestamp: **${{ env.timestampBuildingSucceeded }}**
          🆔 Run ID: **${{ github.run_id }}**
          👤 Git Actor: **${{ github.actor }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
    - name: Get Current Timestamp
      id: timestampBuildingFailed
      shell: bash
      if: failure()
      run: |
        sudo export TZ="Europe/Budapest"
        sudo echo "timestampBuildingFailed=$(date +"%Y. %m. %d. %H:%M:%S")" >> $GITHUB_ENV

    - name: Notify Discord (on Failure)
      uses: liondadev/discord-action@v2.1.3
      if: failure()
      with:
        webhook-url: ${{ inputs.discord-nofity-webook-url }}
        message: |
          -----------------------------
          🔃 Application: **${{ inputs.application-name }}**
          🔴 State: **PUBLISH FAILED**
          ⏲️ Timestamp: **${{ env.timestampBuildingFailed }}**
          🆔 Run ID: **${{ github.run_id }}**
          👤 Git Actor: **${{ github.actor }}**
          🔗 Run Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
